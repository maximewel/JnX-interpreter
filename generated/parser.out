Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    J
    N
    X

Grammar

Rule 0     S' -> document
Rule 1     document -> bloc
Rule 2     bloc -> line
Rule 3     bloc -> bloc line
Rule 4     line -> balise_start content balise_end
Rule 5     line -> balise_start bloc balise_end
Rule 6     balise_start -> < content >
Rule 7     balise_end -> < / content >
Rule 8     content -> token
Rule 9     token -> IDENTIFIER

Terminals, with rules where they appear

/                    : 7
<                    : 6 7
>                    : 6 7
IDENTIFIER           : 9
J                    : 
N                    : 
X                    : 
error                : 

Nonterminals, with rules where they appear

balise_end           : 4 5
balise_start         : 4 5
bloc                 : 1 3 5
content              : 4 6 7
document             : 0
line                 : 2 3
token                : 8

Parsing method: LALR

state 0

    (0) S' -> . document
    (1) document -> . bloc
    (2) bloc -> . line
    (3) bloc -> . bloc line
    (4) line -> . balise_start content balise_end
    (5) line -> . balise_start bloc balise_end
    (6) balise_start -> . < content >

    <               shift and go to state 5

    document                       shift and go to state 1
    bloc                           shift and go to state 2
    line                           shift and go to state 3
    balise_start                   shift and go to state 4

state 1

    (0) S' -> document .



state 2

    (1) document -> bloc .
    (3) bloc -> bloc . line
    (4) line -> . balise_start content balise_end
    (5) line -> . balise_start bloc balise_end
    (6) balise_start -> . < content >

    $end            reduce using rule 1 (document -> bloc .)
    <               shift and go to state 5

    line                           shift and go to state 6
    balise_start                   shift and go to state 4

state 3

    (2) bloc -> line .

    <               reduce using rule 2 (bloc -> line .)
    $end            reduce using rule 2 (bloc -> line .)


state 4

    (4) line -> balise_start . content balise_end
    (5) line -> balise_start . bloc balise_end
    (8) content -> . token
    (2) bloc -> . line
    (3) bloc -> . bloc line
    (9) token -> . IDENTIFIER
    (4) line -> . balise_start content balise_end
    (5) line -> . balise_start bloc balise_end
    (6) balise_start -> . < content >

    IDENTIFIER      shift and go to state 10
    <               shift and go to state 5

    balise_start                   shift and go to state 4
    content                        shift and go to state 7
    bloc                           shift and go to state 8
    token                          shift and go to state 9
    line                           shift and go to state 3

state 5

    (6) balise_start -> < . content >
    (8) content -> . token
    (9) token -> . IDENTIFIER

    IDENTIFIER      shift and go to state 10

    content                        shift and go to state 11
    token                          shift and go to state 9

state 6

    (3) bloc -> bloc line .

    <               reduce using rule 3 (bloc -> bloc line .)
    $end            reduce using rule 3 (bloc -> bloc line .)


state 7

    (4) line -> balise_start content . balise_end
    (7) balise_end -> . < / content >

    <               shift and go to state 13

    balise_end                     shift and go to state 12

state 8

    (5) line -> balise_start bloc . balise_end
    (3) bloc -> bloc . line
    (7) balise_end -> . < / content >
    (4) line -> . balise_start content balise_end
    (5) line -> . balise_start bloc balise_end
    (6) balise_start -> . < content >

    <               shift and go to state 15

    balise_start                   shift and go to state 4
    balise_end                     shift and go to state 14
    line                           shift and go to state 6

state 9

    (8) content -> token .

    <               reduce using rule 8 (content -> token .)
    >               reduce using rule 8 (content -> token .)


state 10

    (9) token -> IDENTIFIER .

    <               reduce using rule 9 (token -> IDENTIFIER .)
    >               reduce using rule 9 (token -> IDENTIFIER .)


state 11

    (6) balise_start -> < content . >

    >               shift and go to state 16


state 12

    (4) line -> balise_start content balise_end .

    <               reduce using rule 4 (line -> balise_start content balise_end .)
    $end            reduce using rule 4 (line -> balise_start content balise_end .)


state 13

    (7) balise_end -> < . / content >

    /               shift and go to state 17


state 14

    (5) line -> balise_start bloc balise_end .

    <               reduce using rule 5 (line -> balise_start bloc balise_end .)
    $end            reduce using rule 5 (line -> balise_start bloc balise_end .)


state 15

    (7) balise_end -> < . / content >
    (6) balise_start -> < . content >
    (8) content -> . token
    (9) token -> . IDENTIFIER

    /               shift and go to state 17
    IDENTIFIER      shift and go to state 10

    content                        shift and go to state 11
    token                          shift and go to state 9

state 16

    (6) balise_start -> < content > .

    IDENTIFIER      reduce using rule 6 (balise_start -> < content > .)
    <               reduce using rule 6 (balise_start -> < content > .)


state 17

    (7) balise_end -> < / . content >
    (8) content -> . token
    (9) token -> . IDENTIFIER

    IDENTIFIER      shift and go to state 10

    content                        shift and go to state 18
    token                          shift and go to state 9

state 18

    (7) balise_end -> < / content . >

    >               shift and go to state 19


state 19

    (7) balise_end -> < / content > .

    <               reduce using rule 7 (balise_end -> < / content > .)
    $end            reduce using rule 7 (balise_end -> < / content > .)

