Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement
Rule 2     program -> statement ; program
Rule 3     statement -> assignement
Rule 4     statement -> structure
Rule 5     statement -> print
Rule 6     print -> PRINT expression
Rule 7     structure -> WHILE expression { program }
Rule 8     assignement -> IDENTIFIER = expression
Rule 9     expression -> NUMBER
Rule 10    expression -> IDENTIFIER
Rule 11    expression -> ( expression )
Rule 12    expression -> expression ADD_OP expression
Rule 13    expression -> expression MUL_OP expression
Rule 14    expression -> ADD_OP expression

Terminals, with rules where they appear

(                    : 11
)                    : 11
;                    : 2
=                    : 8
ADD_OP               : 12 14
IDENTIFIER           : 8 10
MUL_OP               : 13
NUMBER               : 9
PRINT                : 6
WHILE                : 7
error                : 
{                    : 7
}                    : 7

Nonterminals, with rules where they appear

assignement          : 3
expression           : 6 7 8 11 12 12 13 13 14
print                : 5
program              : 2 7 0
statement            : 1 2
structure            : 4

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement
    (2) program -> . statement ; program
    (3) statement -> . assignement
    (4) statement -> . structure
    (5) statement -> . print
    (8) assignement -> . IDENTIFIER = expression
    (7) structure -> . WHILE expression { program }
    (6) print -> . PRINT expression

    IDENTIFIER      shift and go to state 6
    WHILE           shift and go to state 7
    PRINT           shift and go to state 8

    program                        shift and go to state 1
    statement                      shift and go to state 2
    assignement                    shift and go to state 3
    structure                      shift and go to state 4
    print                          shift and go to state 5

state 1

    (0) S' -> program .



state 2

    (1) program -> statement .
    (2) program -> statement . ; program

    $end            reduce using rule 1 (program -> statement .)
    }               reduce using rule 1 (program -> statement .)
    ;               shift and go to state 9


state 3

    (3) statement -> assignement .

    ;               reduce using rule 3 (statement -> assignement .)
    $end            reduce using rule 3 (statement -> assignement .)
    }               reduce using rule 3 (statement -> assignement .)


state 4

    (4) statement -> structure .

    ;               reduce using rule 4 (statement -> structure .)
    $end            reduce using rule 4 (statement -> structure .)
    }               reduce using rule 4 (statement -> structure .)


state 5

    (5) statement -> print .

    ;               reduce using rule 5 (statement -> print .)
    $end            reduce using rule 5 (statement -> print .)
    }               reduce using rule 5 (statement -> print .)


state 6

    (8) assignement -> IDENTIFIER . = expression

    =               shift and go to state 10


state 7

    (7) structure -> WHILE . expression { program }
    (9) expression -> . NUMBER
    (10) expression -> . IDENTIFIER
    (11) expression -> . ( expression )
    (12) expression -> . expression ADD_OP expression
    (13) expression -> . expression MUL_OP expression
    (14) expression -> . ADD_OP expression

    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    (               shift and go to state 14
    ADD_OP          shift and go to state 15

    expression                     shift and go to state 11

state 8

    (6) print -> PRINT . expression
    (9) expression -> . NUMBER
    (10) expression -> . IDENTIFIER
    (11) expression -> . ( expression )
    (12) expression -> . expression ADD_OP expression
    (13) expression -> . expression MUL_OP expression
    (14) expression -> . ADD_OP expression

    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    (               shift and go to state 14
    ADD_OP          shift and go to state 15

    expression                     shift and go to state 16

state 9

    (2) program -> statement ; . program
    (1) program -> . statement
    (2) program -> . statement ; program
    (3) statement -> . assignement
    (4) statement -> . structure
    (5) statement -> . print
    (8) assignement -> . IDENTIFIER = expression
    (7) structure -> . WHILE expression { program }
    (6) print -> . PRINT expression

    IDENTIFIER      shift and go to state 6
    WHILE           shift and go to state 7
    PRINT           shift and go to state 8

    statement                      shift and go to state 2
    program                        shift and go to state 17
    assignement                    shift and go to state 3
    structure                      shift and go to state 4
    print                          shift and go to state 5

state 10

    (8) assignement -> IDENTIFIER = . expression
    (9) expression -> . NUMBER
    (10) expression -> . IDENTIFIER
    (11) expression -> . ( expression )
    (12) expression -> . expression ADD_OP expression
    (13) expression -> . expression MUL_OP expression
    (14) expression -> . ADD_OP expression

    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    (               shift and go to state 14
    ADD_OP          shift and go to state 15

    expression                     shift and go to state 18

state 11

    (7) structure -> WHILE expression . { program }
    (12) expression -> expression . ADD_OP expression
    (13) expression -> expression . MUL_OP expression

    {               shift and go to state 19
    ADD_OP          shift and go to state 20
    MUL_OP          shift and go to state 21


state 12

    (9) expression -> NUMBER .

    {               reduce using rule 9 (expression -> NUMBER .)
    ADD_OP          reduce using rule 9 (expression -> NUMBER .)
    MUL_OP          reduce using rule 9 (expression -> NUMBER .)
    ;               reduce using rule 9 (expression -> NUMBER .)
    $end            reduce using rule 9 (expression -> NUMBER .)
    }               reduce using rule 9 (expression -> NUMBER .)
    )               reduce using rule 9 (expression -> NUMBER .)


state 13

    (10) expression -> IDENTIFIER .

    {               reduce using rule 10 (expression -> IDENTIFIER .)
    ADD_OP          reduce using rule 10 (expression -> IDENTIFIER .)
    MUL_OP          reduce using rule 10 (expression -> IDENTIFIER .)
    ;               reduce using rule 10 (expression -> IDENTIFIER .)
    $end            reduce using rule 10 (expression -> IDENTIFIER .)
    }               reduce using rule 10 (expression -> IDENTIFIER .)
    )               reduce using rule 10 (expression -> IDENTIFIER .)


state 14

    (11) expression -> ( . expression )
    (9) expression -> . NUMBER
    (10) expression -> . IDENTIFIER
    (11) expression -> . ( expression )
    (12) expression -> . expression ADD_OP expression
    (13) expression -> . expression MUL_OP expression
    (14) expression -> . ADD_OP expression

    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    (               shift and go to state 14
    ADD_OP          shift and go to state 15

    expression                     shift and go to state 22

state 15

    (14) expression -> ADD_OP . expression
    (9) expression -> . NUMBER
    (10) expression -> . IDENTIFIER
    (11) expression -> . ( expression )
    (12) expression -> . expression ADD_OP expression
    (13) expression -> . expression MUL_OP expression
    (14) expression -> . ADD_OP expression

    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    (               shift and go to state 14
    ADD_OP          shift and go to state 15

    expression                     shift and go to state 23

state 16

    (6) print -> PRINT expression .
    (12) expression -> expression . ADD_OP expression
    (13) expression -> expression . MUL_OP expression

    ;               reduce using rule 6 (print -> PRINT expression .)
    $end            reduce using rule 6 (print -> PRINT expression .)
    }               reduce using rule 6 (print -> PRINT expression .)
    ADD_OP          shift and go to state 20
    MUL_OP          shift and go to state 21


state 17

    (2) program -> statement ; program .

    $end            reduce using rule 2 (program -> statement ; program .)
    }               reduce using rule 2 (program -> statement ; program .)


state 18

    (8) assignement -> IDENTIFIER = expression .
    (12) expression -> expression . ADD_OP expression
    (13) expression -> expression . MUL_OP expression

    ;               reduce using rule 8 (assignement -> IDENTIFIER = expression .)
    $end            reduce using rule 8 (assignement -> IDENTIFIER = expression .)
    }               reduce using rule 8 (assignement -> IDENTIFIER = expression .)
    ADD_OP          shift and go to state 20
    MUL_OP          shift and go to state 21


state 19

    (7) structure -> WHILE expression { . program }
    (1) program -> . statement
    (2) program -> . statement ; program
    (3) statement -> . assignement
    (4) statement -> . structure
    (5) statement -> . print
    (8) assignement -> . IDENTIFIER = expression
    (7) structure -> . WHILE expression { program }
    (6) print -> . PRINT expression

    IDENTIFIER      shift and go to state 6
    WHILE           shift and go to state 7
    PRINT           shift and go to state 8

    program                        shift and go to state 24
    statement                      shift and go to state 2
    assignement                    shift and go to state 3
    structure                      shift and go to state 4
    print                          shift and go to state 5

state 20

    (12) expression -> expression ADD_OP . expression
    (9) expression -> . NUMBER
    (10) expression -> . IDENTIFIER
    (11) expression -> . ( expression )
    (12) expression -> . expression ADD_OP expression
    (13) expression -> . expression MUL_OP expression
    (14) expression -> . ADD_OP expression

    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    (               shift and go to state 14
    ADD_OP          shift and go to state 15

    expression                     shift and go to state 25

state 21

    (13) expression -> expression MUL_OP . expression
    (9) expression -> . NUMBER
    (10) expression -> . IDENTIFIER
    (11) expression -> . ( expression )
    (12) expression -> . expression ADD_OP expression
    (13) expression -> . expression MUL_OP expression
    (14) expression -> . ADD_OP expression

    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    (               shift and go to state 14
    ADD_OP          shift and go to state 15

    expression                     shift and go to state 26

state 22

    (11) expression -> ( expression . )
    (12) expression -> expression . ADD_OP expression
    (13) expression -> expression . MUL_OP expression

    )               shift and go to state 27
    ADD_OP          shift and go to state 20
    MUL_OP          shift and go to state 21


state 23

    (14) expression -> ADD_OP expression .
    (12) expression -> expression . ADD_OP expression
    (13) expression -> expression . MUL_OP expression

    {               reduce using rule 14 (expression -> ADD_OP expression .)
    ADD_OP          reduce using rule 14 (expression -> ADD_OP expression .)
    MUL_OP          reduce using rule 14 (expression -> ADD_OP expression .)
    ;               reduce using rule 14 (expression -> ADD_OP expression .)
    $end            reduce using rule 14 (expression -> ADD_OP expression .)
    }               reduce using rule 14 (expression -> ADD_OP expression .)
    )               reduce using rule 14 (expression -> ADD_OP expression .)

  ! ADD_OP          [ shift and go to state 20 ]
  ! MUL_OP          [ shift and go to state 21 ]


state 24

    (7) structure -> WHILE expression { program . }

    }               shift and go to state 28


state 25

    (12) expression -> expression ADD_OP expression .
    (12) expression -> expression . ADD_OP expression
    (13) expression -> expression . MUL_OP expression

    {               reduce using rule 12 (expression -> expression ADD_OP expression .)
    ADD_OP          reduce using rule 12 (expression -> expression ADD_OP expression .)
    ;               reduce using rule 12 (expression -> expression ADD_OP expression .)
    $end            reduce using rule 12 (expression -> expression ADD_OP expression .)
    }               reduce using rule 12 (expression -> expression ADD_OP expression .)
    )               reduce using rule 12 (expression -> expression ADD_OP expression .)
    MUL_OP          shift and go to state 21

  ! MUL_OP          [ reduce using rule 12 (expression -> expression ADD_OP expression .) ]
  ! ADD_OP          [ shift and go to state 20 ]


state 26

    (13) expression -> expression MUL_OP expression .
    (12) expression -> expression . ADD_OP expression
    (13) expression -> expression . MUL_OP expression

    {               reduce using rule 13 (expression -> expression MUL_OP expression .)
    ADD_OP          reduce using rule 13 (expression -> expression MUL_OP expression .)
    MUL_OP          reduce using rule 13 (expression -> expression MUL_OP expression .)
    ;               reduce using rule 13 (expression -> expression MUL_OP expression .)
    $end            reduce using rule 13 (expression -> expression MUL_OP expression .)
    }               reduce using rule 13 (expression -> expression MUL_OP expression .)
    )               reduce using rule 13 (expression -> expression MUL_OP expression .)

  ! ADD_OP          [ shift and go to state 20 ]
  ! MUL_OP          [ shift and go to state 21 ]


state 27

    (11) expression -> ( expression ) .

    {               reduce using rule 11 (expression -> ( expression ) .)
    ADD_OP          reduce using rule 11 (expression -> ( expression ) .)
    MUL_OP          reduce using rule 11 (expression -> ( expression ) .)
    ;               reduce using rule 11 (expression -> ( expression ) .)
    $end            reduce using rule 11 (expression -> ( expression ) .)
    }               reduce using rule 11 (expression -> ( expression ) .)
    )               reduce using rule 11 (expression -> ( expression ) .)


state 28

    (7) structure -> WHILE expression { program } .

    ;               reduce using rule 7 (structure -> WHILE expression { program } .)
    $end            reduce using rule 7 (structure -> WHILE expression { program } .)
    }               reduce using rule 7 (structure -> WHILE expression { program } .)

