
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftADD_OPleftMUL_OPrightUMINUSADD_OP IDENTIFIER MUL_OP NUMBER PRINT WHILEprogram : statement program : statement ";" programstatement : assignement\n    | structure\n    | print\n     print : PRINT expression  structure : WHILE expression "{" program "}"  assignement : IDENTIFIER "=" expression expression : NUMBER\n    | IDENTIFIER expression : \'(\' expression \')\' expression : expression ADD_OP expression \n    | expression MUL_OP expressionexpression : ADD_OP expression %prec UMINUS'
    
_lr_action_items = {'IDENTIFIER':([0,7,8,9,10,14,15,19,20,21,],[6,13,13,6,13,13,13,6,13,13,]),'WHILE':([0,9,19,],[7,7,7,]),'PRINT':([0,9,19,],[8,8,8,]),'$end':([1,2,3,4,5,12,13,16,17,18,23,25,26,27,28,],[0,-1,-3,-4,-5,-9,-10,-6,-2,-8,-14,-12,-13,-11,-7,]),'}':([2,3,4,5,12,13,16,17,18,23,24,25,26,27,28,],[-1,-3,-4,-5,-9,-10,-6,-2,-8,-14,28,-12,-13,-11,-7,]),';':([2,3,4,5,12,13,16,18,23,25,26,27,28,],[9,-3,-4,-5,-9,-10,-6,-8,-14,-12,-13,-11,-7,]),'=':([6,],[10,]),'NUMBER':([7,8,10,14,15,20,21,],[12,12,12,12,12,12,12,]),'(':([7,8,10,14,15,20,21,],[14,14,14,14,14,14,14,]),'ADD_OP':([7,8,10,11,12,13,14,15,16,18,20,21,22,23,25,26,27,],[15,15,15,20,-9,-10,15,15,20,20,15,15,20,-14,-12,-13,-11,]),'{':([11,12,13,23,25,26,27,],[19,-9,-10,-14,-12,-13,-11,]),'MUL_OP':([11,12,13,16,18,22,23,25,26,27,],[21,-9,-10,21,21,21,-14,21,-13,-11,]),')':([12,13,22,23,25,26,27,],[-9,-10,27,-14,-12,-13,-11,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,9,19,],[1,17,24,]),'statement':([0,9,19,],[2,2,2,]),'assignement':([0,9,19,],[3,3,3,]),'structure':([0,9,19,],[4,4,4,]),'print':([0,9,19,],[5,5,5,]),'expression':([7,8,10,14,15,20,21,],[11,16,18,22,23,25,26,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement','program',1,'p_program','parserast.py',23),
  ('program -> statement ; program','program',3,'p_programMultiple','parserast.py',27),
  ('statement -> assignement','statement',1,'p_statement','parserast.py',31),
  ('statement -> structure','statement',1,'p_statement','parserast.py',32),
  ('statement -> print','statement',1,'p_statement','parserast.py',33),
  ('print -> PRINT expression','print',2,'p_print','parserast.py',38),
  ('structure -> WHILE expression { program }','structure',5,'p_structure','parserast.py',42),
  ('assignement -> IDENTIFIER = expression','assignement',3,'p_assignement','parserast.py',46),
  ('expression -> NUMBER','expression',1,'p_expression','parserast.py',50),
  ('expression -> IDENTIFIER','expression',1,'p_expression','parserast.py',51),
  ('expression -> ( expression )','expression',3,'p_expression_num','parserast.py',55),
  ('expression -> expression ADD_OP expression','expression',3,'p_expression_op','parserast.py',59),
  ('expression -> expression MUL_OP expression','expression',3,'p_expression_op','parserast.py',60),
  ('expression -> ADD_OP expression','expression',2,'p_expression_uminus','parserast.py',64),
]
